{"version":3,"file":"main.js","mappings":"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","sources":["webpack://my-webpack-project/./src/components/base/events.ts","webpack://my-webpack-project/./src/components/models/data.ts","webpack://my-webpack-project/./src/components/interface/card.ts","webpack://my-webpack-project/./src/utils/utils.ts","webpack://my-webpack-project/./src/index.ts"],"sourcesContent":["/**\n * Брокер событий, классическая реализация\n * В расширенных вариантах есть возможность подписаться на все события\n * или слушать события по шаблону например\n */\nexport class EventEmitter {\n    constructor() {\n        this._events = new Map();\n    }\n    /**\n     * Установить обработчик на событие\n     */\n    on(eventName, callback) {\n        var _a;\n        if (!this._events.has(eventName)) {\n            this._events.set(eventName, new Set());\n        }\n        (_a = this._events.get(eventName)) === null || _a === void 0 ? void 0 : _a.add(callback);\n    }\n    /**\n     * Снять обработчик с события\n     */\n    off(eventName, callback) {\n        var _a;\n        if (this._events.has(eventName)) {\n            this._events.get(eventName).delete(callback);\n            if (((_a = this._events.get(eventName)) === null || _a === void 0 ? void 0 : _a.size) === 0) {\n                this._events.delete(eventName);\n            }\n        }\n    }\n    /**\n     * Инициировать событие с данными\n     */\n    emit(eventName, data) {\n        this._events.forEach((subscribers, name) => {\n            if (name === '*')\n                subscribers.forEach(callback => callback({\n                    eventName,\n                    data\n                }));\n            if (name instanceof RegExp && name.test(eventName) || name === eventName) {\n                subscribers.forEach(callback => callback(data));\n            }\n        });\n    }\n    /**\n     * Слушать все события\n     */\n    onAll(callback) {\n        this.on(\"*\", callback);\n    }\n    /**\n     * Сбросить все обработчики\n     */\n    offAll() {\n        this._events = new Map();\n    }\n    /**\n     * Сделать коллбек триггер, генерирующий событие при вызове\n     */\n    trigger(eventName, context) {\n        return (event = {}) => {\n            this.emit(eventName, Object.assign(Object.assign({}, (event || {})), (context || {})));\n        };\n    }\n}\n","export class Data {\n    constructor(eventManager) {\n        this.eventManager = eventManager;\n        this._products = [];\n    }\n    set productList(products) {\n        this._products = products;\n        this.eventManager.emit('products:updated');\n    }\n    get productList() {\n        return this._products;\n    }\n    previewProduct(product) {\n        this.selectedProduct = product;\n        this.eventManager.emit('productPreview:open', product);\n    }\n}\n","export class Card {\n    constructor(template, events, actions) {\n        this.events = events;\n        this._categoryColors = {\n            \"дополнительное\": \"additional\",\n            \"софт-скил\": \"soft\",\n            \"кнопка\": \"button\",\n            \"хард-скил\": \"hard\",\n            \"другое\": \"other\",\n        };\n        this._cardElement = template.content.querySelector('.product-card').cloneNode(true);\n        this._categoryElement = this._cardElement.querySelector('.product-card__category');\n        this._titleElement = this._cardElement.querySelector('.product-card__title');\n        this._imageElement = this._cardElement.querySelector('.product-card__image');\n        this._priceElement = this._cardElement.querySelector('.product-card__price');\n        if (actions === null || actions === void 0 ? void 0 : actions.handleClick) {\n            this._cardElement.addEventListener('click', actions.handleClick);\n        }\n    }\n    setElementText(element, value) {\n        if (element) {\n            element.textContent = String(value);\n        }\n    }\n    set category(value) {\n        this.setElementText(this._categoryElement, value);\n        this._categoryElement.className = `product-card__category product-card__category_${this._categoryColors[value]}`;\n    }\n    formatPrice(value) {\n        if (value === null) {\n            return 'Бесценно';\n        }\n        return `${value} синапсов`;\n    }\n    render(Data) {\n        this._categoryElement.textContent = Data.itemCategory;\n        this.category = Data.itemCategory;\n        this._titleElement.textContent = Data.itemTitle;\n        this._imageElement.src = Data.itemImage;\n        this._imageElement.alt = this._titleElement.textContent;\n        this._priceElement.textContent = this.formatPrice(Data.itemPrice);\n        return this._cardElement;\n    }\n}\n","export function pascalToKebab(value) {\n    return value.replace(/([a-z0–9])([A-Z])/g, \"$1-$2\").toLowerCase();\n}\nexport function isSelector(x) {\n    return (typeof x === \"string\") && x.length > 1;\n}\nexport function isEmpty(value) {\n    return value === null || value === undefined;\n}\nexport function ensureAllElements(selectorElement, context = document) {\n    if (isSelector(selectorElement)) {\n        return Array.from(context.querySelectorAll(selectorElement));\n    }\n    if (selectorElement instanceof NodeList) {\n        return Array.from(selectorElement);\n    }\n    if (Array.isArray(selectorElement)) {\n        return selectorElement;\n    }\n    throw new Error(`Unknown selector element`);\n}\nexport function ensureElement(selectorElement, context) {\n    if (isSelector(selectorElement)) {\n        const elements = ensureAllElements(selectorElement, context);\n        if (elements.length > 1) {\n            console.warn(`selector ${selectorElement} return more then one element`);\n        }\n        if (elements.length === 0) {\n            throw new Error(`selector ${selectorElement} return nothing`);\n        }\n        return elements.pop();\n    }\n    if (selectorElement instanceof HTMLElement) {\n        return selectorElement;\n    }\n    throw new Error('Unknown selector element');\n}\nexport function cloneTemplate(query) {\n    const template = ensureElement(query);\n    return template.content.firstElementChild.cloneNode(true);\n}\nexport function bem(block, element, modifier) {\n    let name = block;\n    if (element)\n        name += `__${element}`;\n    if (modifier)\n        name += `_${modifier}`;\n    return {\n        name,\n        class: `.${name}`\n    };\n}\nexport function getObjectProperties(obj, filter) {\n    return Object.entries(Object.getOwnPropertyDescriptors(Object.getPrototypeOf(obj)))\n        .filter(([name, prop]) => filter ? filter(name, prop) : (name !== 'constructor'))\n        .map(([name, prop]) => name);\n}\n/**\n * Устанавливает dataset атрибуты элемента\n */\nexport function setElementData(el, data) {\n    for (const key in data) {\n        el.dataset[key] = String(data[key]);\n    }\n}\n/**\n * Получает типизированные данные из dataset атрибутов элемента\n */\nexport function getElementData(el, scheme) {\n    const data = {};\n    for (const key in el.dataset) {\n        data[key] = scheme[key](el.dataset[key]);\n    }\n    return data;\n}\n/**\n * Проверка на простой объект\n */\nexport function isPlainObject(obj) {\n    const prototype = Object.getPrototypeOf(obj);\n    return prototype === Object.getPrototypeOf({}) ||\n        prototype === null;\n}\nexport function isBoolean(v) {\n    return typeof v === 'boolean';\n}\n/**\n * Фабрика DOM-элементов в простейшей реализации\n * здесь не учтено много факторов\n * в интернет можно найти более полные реализации\n */\nexport function createElement(tagName, props, children) {\n    const element = document.createElement(tagName);\n    if (props) {\n        for (const key in props) {\n            const value = props[key];\n            if (isPlainObject(value) && key === 'dataset') {\n                setElementData(element, value);\n            }\n            else {\n                // @ts-expect-error fix indexing later\n                element[key] = isBoolean(value) ? value : String(value);\n            }\n        }\n    }\n    if (children) {\n        for (const child of Array.isArray(children) ? children : [children]) {\n            element.append(child);\n        }\n    }\n    return element;\n}\n","import './scss/styles.scss';\nimport { EventEmitter } from './components/base/events';\nimport { Data } from './components/models/data';\nimport { Card } from './components/interface/card';\nimport { ensureElement } from './utils/utils';\nconst cardCatalog = document.querySelector('#card-catalog');\nconst events = new EventEmitter();\nconst dataModel = new Data(events);\nevents.on('productCards:receive', () => {\n    console.log('Событие получения карточек товаров получено');\n    console.log('Данные модели:', dataModel.productList);\n    dataModel.productList.forEach(item => {\n        console.log('Рендеринг карточки для товара:', item);\n        const card = new Card(cardCatalog, events, { handleClick: () => events.emit('card:select', item) });\n        const renderedCard = card.render(item);\n        console.log('Отрендеренная карточка:', renderedCard);\n        ensureElement('.gallery').append(renderedCard);\n    });\n});\n"],"names":["EventEmitter","_classCallCheck","this","_events","Map","_createClass","key","value","on","eventName","callback","_a","has","set","Set","get","add","off","size","emit","data","forEach","subscribers","name","RegExp","test","onAll","offAll","trigger","context","_this","event","arguments","length","undefined","Object","assign","Data","eventManager","_products","products","previewProduct","product","selectedProduct","Card","template","events","actions","_categoryColors","_cardElement","content","querySelector","cloneNode","_categoryElement","_titleElement","_imageElement","_priceElement","handleClick","addEventListener","setElementText","element","textContent","String","className","concat","formatPrice","render","itemCategory","category","itemTitle","src","itemImage","alt","itemPrice","isSelector","x","ensureElement","selectorElement","elements","ensureAllElements","document","Array","from","querySelectorAll","NodeList","isArray","Error","console","warn","pop","HTMLElement","cardCatalog","dataModel","log","productList","item","renderedCard","append"],"sourceRoot":""}